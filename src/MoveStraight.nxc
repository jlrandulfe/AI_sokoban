#define WAIT_TIME 10

struct motorStruct {
int speed;              // 0%-100% Speed
int turn;               // -100% - 100% Turn
bool direction;         // 1: Fwd 0: Rev
};

struct sensorBoolStruct {
bool middle;
bool right;
bool left;
};

struct sensorIntStruct {
int middle;
int right;
int left;
};

motorStruct MoveStraight(sensorBoolStruct inputSensors){

    int Compensation = 30;
    int AmountCrosses_count = 0;
    int Speed = 30;
    int AmountCrosses = 3;
    int x;
    motorStruct returnMovement;

    if (!inputSensors.middle           //On track
       && inputSensors.right
       && inputSensors.left)
       x = 10;
    else if (!inputSensors.middle     //Out of track to the right
       && inputSensors.right
       && !inputSensors.left)
       x = 20;
    else if (!inputSensors.middle      //Out of track to the left
       && !inputSensors.right
       && inputSensors.left)
       x = 30;
    else if (!inputSensors.middle      //Reached a cross and NOT count
       && !inputSensors.right
       && !inputSensors.left
       && AmountCrosses_count < AmountCrosses)
       x = 40;
    else if (!inputSensors.middle      //Reached a cross AND count
       && !inputSensors.right
       && !inputSensors.left
       && AmountCrosses_count = AmountCrosses)
       x = 50;
    else                               //Error
       x = 99;


        if (x==10){ //Go straight
             returnMovement.speed = Speed;
             returnMovement.turn = 0;
             returnMovement.direction = 1;
        }

        else if (x==20){ //Right compensate
             returnMovement.speed = Speed;
             returnMovement.turn = Compensation;
             returnMovement.direction = 1;
        }

        else if (x==30){ //Left compensate
             returnMovement.speed = Speed;
             returnMovement.turn = -Compensation;
             returnMovement.direction = 1;
        }

        else if (x==40){ //Cross: Cross and Count up
             AmountCrosses_count = AmountCrosses_count + 1;
             Wait(10);
        }
             
        else if (x==50){ //Cross: Stop and set count up = 0
             AmountCrosses_count = 0;
             returnMovement.speed = 0;
             returnMovement.turn = 0;
             returnMovement.direction = 1;
        }
             
        else { //Error -> don't move
             returnMovement.speed = 0;
             returnMovement.turn = 0;
             returnMovement.direction = 1;
             x=99;
         }


        TextOut(10, LCD_LINE6, StrCat( " state: ", NumToStr(x)));
        TextOut(10, LCD_LINE7, StrCat(" cross: ", NumToStr(AmountCrosses_count)));
    return returnMovement;

}



task main(){
    // Configure inputs 2 and 3 to be light sensors.
    SetSensorLight(IN_1);
    SetSensorLight(IN_2);
    SetSensorLight(IN_3);

    sensorIntStruct sensor_raw;             // Variables where the raw value of the sensors will be stored.
    sensorBoolStruct sensor_bool;           // Boolean variables indicating if the sensors are detecting a black area.
    sensorIntStruct sensor_thresholds;      // Values defining the thresholds of the 3 sensors limits

    motorStruct motor;                      // Motors variables.

    // Main loop.
    while(true)
    {
        // Get the value of the 3 infrared sensors.
        sensor_raw.middle = Sensor(IN_1);
        sensor_raw.right = Sensor(IN_2);
        sensor_raw.left = Sensor(IN_3);

        // Go through every programmed behaviour.
        // 1st behaviour: move straight, following a black line.
        
        if (sensor_raw.middle < 38)
            sensor_bool.middle = 0;
        else
            sensor_bool.middle = 1;

        if (sensor_raw.right < 32)
            sensor_bool.right = 0; //black
        else
            sensor_bool.right = 1; // white

        if (sensor_raw.left < 38)
            sensor_bool.left = 0;
        else
            sensor_bool.left = 1;
            

        // Print sensors values to screen.
        TextOut(10, LCD_LINE1, StrCat(NumToStr(sensor_bool.middle), " mid ", NumToStr(sensor_raw.middle)));
        TextOut(10, LCD_LINE2, StrCat(NumToStr(sensor_bool.right), " r ", NumToStr(sensor_raw.right)));
        TextOut(10, LCD_LINE3, StrCat(NumToStr(sensor_bool.left), " l ", NumToStr(sensor_raw.left)));
        Wait(WAIT_TIME);


        motor = MoveStraight(sensor_bool);
        TextOut(10, LCD_LINE4, StrCat(NumToStr(motor.speed), " motor ", NumToStr(motor.turn)));

        // Set the output of the actuators.
        if (motor.direction == false)
            OnFwdSync(OUT_AC, motor.speed, motor.turn);
        else
            OnRevSync(OUT_AC, motor.speed, motor.turn);
    }
}
