#define WAIT_TIME 10

struct MotorStruct {
int speed;              // 0%-100% Speed
int turn;               // -100% - 100% Turn
bool direction;         // 1: Fwd 0: Rev
};

struct sensorBoolStruct {
bool middle;
bool right;
bool left;
};

struct sensorIntStruct {
int middle;
int right;
int left;
};


task main(){
    // Configure inputs 2 and 3 to be light sensors.
    SetSensorLight(IN_1);
    SetSensorLight(IN_2);
    SetSensorLight(IN_3);

    sensorIntStruct sensor_raw;             // Variables where the raw value of the sensors will be stored.
    sensorBoolStruct sensor_bool;           // Boolean variables indicating if the sensors are detecting a black area.
    sensorIntStruct sensor_thresholds;      // Values defining the thresholds of the 3 sensors limits

    MotorStruct motor;                      // Motors variables.
    
     /*Defines thres hold for the 3 sensors*/
 // Low values=black and big values=white
sensor_thresholds.middle=35;
sensor_thresholds.left=39;
sensor_thresholds.right=28;

    // Main loop.
    while(true)
    {
        // Get the value of the 3 infrared sensors.
        sensor_raw.middle = Sensor(IN_3);
        sensor_raw.right = Sensor(IN_2);
        sensor_raw.left = Sensor(IN_1);

        // Print sensors values to screen.
        TextOut(10, LCD_LINE1, StrCat("mid sens.: ", NumToStr(sensor_raw.middle)));
        TextOut(10, LCD_LINE2, StrCat("r sens.: ", NumToStr(sensor_raw.right)));
        TextOut(10, LCD_LINE3, StrCat("l sens.: ", NumToStr(sensor_raw.left)));
        Wait(WAIT_TIME);
        // Go through every programmed behaviour.
        // 1st behaviour: move straight, following a black line.
        motor.speed = 50;
        motor.turn = 0;

        // Set the output of the actuators.
        if (motor.direction == true)
            OnFwdSync(OUT_AC, motor.speed, motor.turn);
        else
            OnRevSync(OUT_AC, motor.speed, motor.turn);
    }
}
